[[110, u'<p>To explain why your script isn\'t working right now, I\'ll rename the variable <code>unsorted</code> to <code>sorted</code>.</p>\n\n<p>At first, your list isn\'t yet sorted. Of course, we set <code>sorted</code> to <code>False</code>.</p>\n\n<p>As soon as we start the <code>while</code> loop, we assume that the list is already sorted. The idea is this: as soon as we find two elements that are not in the right order, we set <code>sorted</code> back to <code>False</code>. <code>sorted</code> will remain <code>True</code> <em>only if there were no elements in the wrong order</em>.</p>\n\n<pre><code>sorted = False  # We haven\'t started sorting yet\n\nwhile not sorted:\n    sorted = True  # Assume the list is now sorted\n    for element in range(0, length):\n        if badList[element] &gt; badList[element + 1]:\n            sorted = False  # We found two elements in the wrong order\n            hold = badList[element + 1]\n            badList[element + 1] = badList[element]\n            badList[element] = hold\n    # We went through the whole list. At this point, if there were no elements\n    # in the wrong order, sorted is still True. Otherwise, it\'s false, and the\n    # while loop executes again.\n</code></pre>\n\n<p>There are also minor little issues that would help the code be more efficient or readable.</p>\n\n<ul>\n<li><p>In the <code>for</code> loop, you use the variable <code>element</code>. Technically, <code>element</code> is not an element; it\'s a number representing a list index. Also, it\'s quite long. In these cases, just use a temporary variable name, like <code>i</code> for "index".</p>\n\n<pre><code>for i in range(0, length):\n</code></pre></li>\n<li><p>The <code>range</code> command can also take just one argument (named <code>stop</code>). In that case, you get a list of all the integers from 0 to that argument.</p>\n\n<pre><code>for i in range(length):\n</code></pre></li>\n<li><p>The <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer" title="Style Guide for Python Code">Python Style Guide</a> recommends that variables be named in lowercase with underscores. This is a very minor nitpick for a little script like this; it\'s more to get you accustomed to what Python code most often resembles.</p>\n\n<pre><code>def bubble(bad_list):\n</code></pre></li>\n<li><p>To swap the values of two variables, write them as a tuple assignment. The right hand side gets evaluated as a tuple (say, <code>(badList[i+1], badList[i])</code> is <code>(3, 5)</code>) and then gets assigned to the two variables on the left hand side (<code>(badList[i], badList[i+1])</code>).</p>\n\n<pre><code>bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i]\n</code></pre></li>\n</ul>\n\n<p>Put it all together, and you get this:</p>\n\n<pre><code>my_list = [12, 5, 13, 8, 9, 65]\n\ndef bubble(bad_list):\n    length = len(bad_list) - 1\n    sorted = False\n\n    while not sorted:\n        sorted = True\n        for i in range(length):\n            if bad_list[i] &gt; bad_list[i+1]:\n                sorted = False\n                bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i]\n\nbubble(my_list)\nprint my_list\n</code></pre>\n\n<p>(I removed your print statement too, by the way.)</p>\n'], [11, u"<p>The goal of bubble sort is to move the <em>heavier</em> items at the bottom in each round, while moving the <em>lighter</em> items up. In the inner loop, where you compare the elements, <strong>you don't have to iterate the whole list in each turn</strong>. The <em>heaviest</em> is already placed last. The <em>swapped</em> variable is an extra check so we can mark that the list is now sorted and avoid continuing with unnecessary calculations.</p>\n\n<pre><code>def bubble(badList):\n    length = len(badList)\n    for i in range(0,length):\n        swapped = False\n        for element in range(0, length-i-1):\n            if badList[element] &gt; badList[element + 1]:\n                hold = badList[element + 1]\n                badList[element + 1] = badList[element]\n                badList[element] = hold\n                swapped = True\n        if not swapped: break\n\n    return badList\n</code></pre>\n\n<p>Your version 1, corrected:</p>\n\n<pre><code>def bubble(badList):\n    length = len(badList) - 1\n    unsorted = True\n    while unsorted:\n        unsorted = False\n        for element in range(0,length):\n            #unsorted = False\n            if badList[element] &gt; badList[element + 1]:\n                 hold = badList[element + 1]\n                 badList[element + 1] = badList[element]\n                 badList[element] = hold\n                 unsorted = True\n                 #print badList\n             #else:\n                 #unsorted = True\n\n     return badList\n</code></pre>\n"], [9, u"<p>This is what happens when you use variable name of negative meaning, you need to invert their values.  The following would be easier to understand:</p>\n\n<pre><code>sorted = False\nwhile not sorted:\n    ...\n</code></pre>\n\n<p>On the other hand, the logic of the algorithm is a little bit off.  You need to check whether two elements swapped during the for loop.  Here's how I would write it:</p>\n\n<pre><code>def bubble(values):\n    length = len(values) - 1\n    sorted = False\n    while not sorted:\n        sorted = True\n        for element in range(0,length):\n            if values[element] &gt; values[element + 1]:\n                 hold = values[element + 1]\n                 values[element + 1] = values[element]\n                 values[element] = hold\n                 sorted = False\n    return values\n</code></pre>\n"]]